log(0.95) / log(1 - p_hat)
Range * (1 - 0.95) ^ (-1 / (n - 1)) - 1
(1 - 0.95) ^ (-1 / (n - 1)) - 1
SS89 <- Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
SS89
log(0.95) / log(1 - p_hat)
p <- 0.0001
hor <- rbinom(1000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
SS89 <- Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.95) / log(1 - p_hat)
SS89
p <- 0.001
hor <- rbinom(1000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
SS89 <- Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.95) / log(1 - p_hat)
SS89
p <- 0.0001
hor <- rbinom(100000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.95) / log(1 - p_hat)
p <- 0.5
hor <- rbinom(100000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.95) / log(1 - p_hat)
p <- 0.1
hor <- rbinom(100000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.95) / log(1 - p_hat)
p <- 0.1
hor <- rbinom(10000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.95) / log(1 - p_hat)
p <- 0.01
hor <- rbinom(10000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.95) / log(1 - p_hat)
p_hat
1 - (1 - p_hat) ^ 100
1 - (1 - p_hat) ^ 1000
1 - (1 - p_hat) ^ 100
1 - (1 - p_hat) ^ 500
1 - (1 - p_hat) ^ 400
1 - (1 - p_hat) ^ 300
1 - (1 - p_hat) ^ 350
1 - (1 - p_hat) ^ 340
1 - (1 - p_hat) ^ 330
log(0.05) / log(1 - p_hat)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p <- 0.01
hor <- rbinom(100000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.05) / log(1 - p_hat)
p <- 0.001
hor <- rbinom(100000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.05) / log(1 - p_hat)
p <- 0.01
hor <- rbinom(1000000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.05) / log(1 - p_hat)
p <- 0.01
hor <- rbinom(10000000, 1, p)
FAD <- which(hor == 1)[1]
LAD <- max(which(hor == 1))
Range <- LAD - FAD + 1
n <- sum(hor)
Range * ((1 - 0.95) ^ (-1 / (n - 1)) - 1)
p_hat <- n / Range
log(0.05) / log(1 - p_hat)
?pgeom
choose(10,0)
500/40
library(TSA)
install.packages("TSA", dep=T)
win.graph(width=4.875, height=2.5,pointsize=8)
plot(1:10)
d <- read.delim(file.choose())
d
head(d)
dim(d)
plot(d, type="l")
plot(seq_along(d), d, type="l")
d
head(d)
class(d)
dim(d)
d=as.numeric(d)
plot(d$larain)
plot(d$larain, type="o")
prior1 <- prior2 <- 0.5
mean1 <- c(0, 0)
mean1 <- t(c(0, 0))
mean1
c(0,0)
mean1 <- matrix(c(0, 0), ncol = 1)
mean1
covar
covar <- matrix(c(1, 0, 0, 0.5625), nrow = 2)
covar
log(prior1 / prior2)
t(mean1 + mean2)
mean1 <- matrix(c(0, 0), ncol = 1)
mean2 <- matrix(c(2, -2), ncol = 1)
mean1 + mean2
t(mean1 + mean2)
covar
solve?
?solve
solve(covar)
a0 <- log(prior1 / prior2) - 0.5 * t(mean1 + mean2) %*% solve(covar) * (mean1 - mean2)
t(mean1 + mean2)
(mean1 - mean2)
t(mean1 + mean2) %*% solve(covar)
t(mean1 + mean2) %*% solve(covar) * (mean1 - mean2)
t(mean1 + mean2) %*% solve(covar) %*% (mean1 - mean2)
a0 <- log(prior1 / prior2) - 0.5 * t(mean1 + mean2) %*% solve(covar) %*% (mean1 - mean2)
a0
solve(covar) %*% (mean1 - mean2)
a[1]
a
a <- solve(covar) %*% (mean1 - mean2)
a
a[1, ]
5.56-2-3.56
d <- read.csv(file.choose(), header = TRUE)
head(d)
hist(d$Ssk)
windows()
unique(d$BSM.Type)
BSM.uniq <- sort(unique(d$BSM.Type))
BSM.uniq
for(i in seq_along(BSM.uniq)) hist(d$Ssk[d$BSM.Type == BSM.uniq[i]])
par(mfrow = c(2,2))
for(i in seq_along(BSM.uniq)) hist(d$Ssk[d$BSM.Type == BSM.uniq[i]])
head(d)
for(i in seq_along(BSM.uniq)) hist(d$Sku[d$BSM.Type == BSM.uniq[i]])
for(i in seq_along(BSM.uniq)) hist(log(d$Sku[d$BSM.Type == BSM.uniq[i]]))
BSM.uniq
colnames(d)
d1 <- d[d$BSM.Type == "Percussion" | d$BSM.Type == "Cutmark", c("Ssk", "Sku")]
head(d1)
d1 <- d[d$BSM.Type == "Percussion" | d$BSM.Type == "Cutmark", c("BSM.Type", "Ssk", "Sku")]
head(d1)
d1 <- d[d$BSM.Type == "Percussion" | d$BSM.Type == "Cutmark", c("Ssk", "Sku")]
head(d1)
d1 <- d[d$BSM.Type == "Percussion" | d$BSM.Type == "Cutmark", c("BSM.Type", "Ssk", "Sku")]
head(d1)
table(d1$BSM.Type)
prior_cut <- prior_perc <- 0.5
?lda
setwd("C:/Users/adu")
setwd("C:/Users/adu/OneDrive - Colostate/Desktop/Manuscripts/Other authors/Cohen et al_climate variability/GitHub/")
## Read in CMR results
CMR.res <- readRDS("CMR files/CMR results.rds")
turk_CMR.res <- readRDS("CMR files/Turkana CMR results.rds") # Turkana only
# get out origination and extinction estimates for lumped cf treatment & combine into one list
cmr_cf.lump <- CMR.res$neo_cf.lump # all localities cf lumped
turk_cmr_lump <- turk_CMR.res$neo_cf.lump # turkana cf lumped
cmr.rates <- list(
cf.lump_orig = 1 - cmr_cf.lump$estimate[grep("Gamma", rownames(cmr_cf.lump))], # all localities origination
cf.lump_extinct = 1 - cmr_cf.lump$estimate[grep("Phi", rownames(cmr_cf.lump))], # all localities extinction
turk_lump_orig = 1 - turk_cmr_lump$estimate[grep("Gamma", rownames(turk_cmr_lump))], # turkana origination
turk_lump_extinct = 1 - turk_cmr_lump$estimate[grep("Phi", rownames(turk_cmr_lump))] # turkana extinction
)
# create a list of ages, corresponding to rates in cmr.rates
bins <- seq(3.75, 0, -0.25) # create time bins of 0.25 Myr from 3.75-0 Ma
time.bin.mid <- bins[-length(bins)] + diff(bins)[1] / 2 # bin age midpoints
turk.bin.mid <- seq(4.125, 1.125, -0.25) # time bin midpoints for 0.25 Myr from 4.125-1.125 for Turkana
ages <- list(
cf.lump_orig_ages = time.bin.mid[-1],
cf.lump_extinct_ages = time.bin.mid[-length(time.bin.mid)],
turk_lump_orig_ages = turk.bin.mid[-1],
turk_lump_extinct_ages = turk.bin.mid[-length(turk.bin.mid)]
)
## Read in climate variability data
clim.var <- read.csv(file = "original datasets/climate variability 250ka bins.csv", header = TRUE, row.names = 1)
## remove time bins from climate variability that aren't in CMR results
clim.var1 <- clim.var[seq(1, which(rownames(clim.var) == "3625")), ]
clim.var1 <- clim.var1[, -ncol(clim.var1)]
clim.var1 <- clim.var1[seq(nrow(clim.var1), 1), ] # reverse row order, so time bins match those of CMR rates
d13C <- clim.var$Turkana_psol_d13C # Turkana psol data only
d13C <- d13C[rownames(clim.var) %in% seq(1125, 4125, 250)] # get out data synchronous with mammal data
d13C <- rev(d13C) # reverse row order, so time bins match those of CMR rates
####################################################
## Detrend each time series using a LOWESS regression
# write a function to do this
# ARGUMENTS:
# age: age associated with each data point in the time series
# x: variable value associated with each data point
# span: smoothing span of LOWESS regression (passed on to lowess() function)
detrend <- function(age, x, span = 2 / 3){
lowess.res <- lowess(age, x, f = span)
return(x - rev(lowess.res$y)) # rev() is needed to maintain order from older to younger
}
# climate variables
clim.var1.detrend <- apply(clim.var1, 2, function(clim) detrend(age = as.numeric(rownames(clim.var1)) / 1000, x = clim))
# d13C paleosol
d13C.detrend <- detrend(age = seq(4.125, 1.125, -0.25), x = d13C)
# CMR rates
cmr.rates.detrend <- mapply(detrend, age = ages, x = cmr.rates)
## run CCF analyses
# create function for estimate CCF and its p-value
# ARGUMENTS:
# climate: climate time series
# cmr_rate: CMR rate time series
# ccf.lag: max #lags to consider in CCF
# acf.lag: max. # lags in ACF for computing SE
CCF <- function(climate, cmr_rate, ccf.lag, acf.lag){
n <- length(climate)
ccf.res <- ccf(cmr_rate, climate, plot = FALSE)[0:ccf.lag]
ccf.hat <- ccf.res$acf
acf.clim <- acf(climate, lag.max = acf.lag, plot = FALSE)$acf
acf.cmr <- acf(cmr_rate, lag.max = acf.lag, plot = FALSE)$acf
ccf.se <- sqrt((1 + 2 * sum(acf.clim * acf.cmr)) / n)
p.vals <- sapply(ccf.hat, function(x) pnorm(abs(x), sd = ccf.se, lower.tail = FALSE) * 2)
return(list(lag.n = seq(0, ccf.lag), ccf.hat = ccf.hat, ccf.se = ccf.se, p.vals = p.vals))
}
# run CCFs for E. African data
ccf.res.orig <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-1], cmr_rate = cmr.rates.detrend$cf.lump_orig, ccf.lag = 2, acf.lag = length(clim) - 1))
ccf.res.extinct <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-length(clim)], cmr_rate = cmr.rates.detrend$cf.lump_extinct, ccf.lag = 2, acf.lag = length(clim) - 1))
# run CCFs for Turkana data
ccf.turk.orig <- CCF(climate = d13C.detrend[-1], cmr_rate = cmr.rates.detrend$turk_lump_orig, ccf.lag = 2, acf.lag = length(d13C.detrend) - 1)
ccf.turk.extinct <- CCF(climate = d13C.detrend[-length(d13C)], cmr_rate = cmr.rates.detrend$turk_lump_extinct, ccf.lag = 2, acf.lag = length(d13C.detrend) - 1)
## see how many P-values are significant
p.vals <- c(sapply(ccf.res.orig, function(x) x$p.vals),
sapply(ccf.res.extinct, function(x) x$p.vals),
ccf.turk.orig$p.vals,
ccf.turk.extinct$p.vals)
sum(p.vals <= 0.05) # none are significant
?acf
n
10*log10(length(clim))
# run CCFs for E. African data
ccf.res.orig <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-1], cmr_rate = cmr.rates.detrend$cf.lump_orig, ccf.lag = 2, acf.lag = 10*log10(length(clim))))
ccf.res.extinct <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-length(clim)], cmr_rate = cmr.rates.detrend$cf.lump_extinct, ccf.lag = 2, acf.lag = 10*log10(length(clim))))
# run CCFs for Turkana data
ccf.turk.orig <- CCF(climate = d13C.detrend[-1], cmr_rate = cmr.rates.detrend$turk_lump_orig, ccf.lag = 2, acf.lag = 10*log10(length(d13C.detrend)))
ccf.turk.extinct <- CCF(climate = d13C.detrend[-length(d13C)], cmr_rate = cmr.rates.detrend$turk_lump_extinct, ccf.lag = 2, acf.lag = 10*log10(length(d13C.detrend)))
## see how many P-values are significant
p.vals <- c(sapply(ccf.res.orig, function(x) x$p.vals),
sapply(ccf.res.extinct, function(x) x$p.vals),
ccf.turk.orig$p.vals,
ccf.turk.extinct$p.vals)
sum(p.vals <= 0.05)
acf(clim.var.1.detrend[,1])
apply(clim.var1.detrend, 2, acf)
windows()
par(mfrow=c(3, 2))
apply(clim.var1.detrend, 2, acf)
?segments
## run CCF analyses
# create function for estimate CCF and its p-value
# ARGUMENTS:
# climate: climate time series
# cmr_rate: CMR rate time series
# ccf.lag: max #lags to consider in CCF
# acf.lag: max. # lags in ACF for computing SE
CCF <- function(climate, cmr_rate, ccf.lag, acf.lag.clim, acf.lag.cmr = acf.lag.clim){
n <- length(climate)
ccf.res <- ccf(cmr_rate, climate, plot = FALSE)[0:ccf.lag]
ccf.hat <- ccf.res$acf
acf.clim <- acf(climate, lag.max = acf.lag.clim, plot = FALSE)$acf
acf.cmr <- acf(cmr_rate, lag.max = acf.lag.cmr, plot = FALSE)$acf
ccf.se <- sqrt((1 + 2 * sum(acf.clim * acf.cmr)) / n)
p.vals <- sapply(ccf.hat, function(x) pnorm(abs(x), sd = ccf.se, lower.tail = FALSE) * 2)
return(list(lag.n = seq(0, ccf.lag), ccf.hat = ccf.hat, ccf.se = ccf.se, p.vals = p.vals))
}
# run CCFs for E. African data
ccf.res.orig <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-1], cmr_rate = cmr.rates.detrend$cf.lump_orig, ccf.lag = 2, acf.lag = length(clim) - 1))
ccf.res.extinct <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-length(clim)], cmr_rate = cmr.rates.detrend$cf.lump_extinct, ccf.lag = 2, acf.lag = length(clim) - 1))
# run CCFs for Turkana data
ccf.turk.orig <- CCF(climate = d13C.detrend[-1], cmr_rate = cmr.rates.detrend$turk_lump_orig, ccf.lag = 2, acf.lag = length(d13C.detrend) - 1)
ccf.turk.extinct <- CCF(climate = d13C.detrend[-length(d13C)], cmr_rate = cmr.rates.detrend$turk_lump_extinct, ccf.lag = 2, acf.lag = length(d13C.detrend) - 1)
## see how many P-values are significant
p.vals <- c(sapply(ccf.res.orig, function(x) x$p.vals),
sapply(ccf.res.extinct, function(x) x$p.vals),
ccf.turk.orig$p.vals,
ccf.turk.extinct$p.vals)
sum(p.vals <= 0.05) # none are significant. The same is true whether default lag.max argument from acf() is used or if only significant ACFs are used
# run CCFs for E. African data
ccf.res.orig <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-1], cmr_rate = cmr.rates.detrend$cf.lump_orig, ccf.lag = 2, acf.lag.clim = length(clim) - 1))
ccf.res.extinct <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-length(clim)], cmr_rate = cmr.rates.detrend$cf.lump_extinct, ccf.lag = 2, acf.lag.clim = length(clim) - 1))
# run CCFs for Turkana data
ccf.turk.orig <- CCF(climate = d13C.detrend[-1], cmr_rate = cmr.rates.detrend$turk_lump_orig, ccf.lag = 2, acf.lag.clim = length(d13C.detrend) - 1)
ccf.turk.extinct <- CCF(climate = d13C.detrend[-length(d13C)], cmr_rate = cmr.rates.detrend$turk_lump_extinct, ccf.lag = 2, acf.lag.clim = length(d13C.detrend) - 1)
## see how many P-values are significant
p.vals <- c(sapply(ccf.res.orig, function(x) x$p.vals),
sapply(ccf.res.extinct, function(x) x$p.vals),
ccf.turk.orig$p.vals,
ccf.turk.extinct$p.vals)
sum(p.vals <= 0.05) # none are significant. The same is true whether default lag.max argument from acf() is used or if only significant ACFs are used
?acf
test=acf(clim.var1.detrend[,1])
test
test$type
test$series
test$snames
plot(test)
abline(h=1.96*sqrt(nrow(clim.var1)))
abline(h=1.96sqrt(nrow(clim.var1)))
abline(h=1.96/sqrt(nrow(clim.var1)))
qnorm(0.025)
library(TSA)
test=prewhiten(clim.var1[, 1], cmr.rates$cf.lump_orig)
?prewhiten
test
test=prewhiten(clim.var1[, 2], cmr.rates$cf.lump_orig)
test=prewhiten(clim.var1[, 3], cmr.rates$cf.lump_orig)
test=ccf(clim.var1[, 2], cmr.rates$cf.lump_orig)
test=prewhiten(cmr.rates$cf.lump_orig, clim.var1[, 3])
?test
test=prewhiten(clim.var1[, 3], cmr.rates$cf.lump_orig)
test=prewhiten(clim.var1[, 4], cmr.rates$cf.lump_orig)
test=prewhiten(clim.var1[, 5], cmr.rates$cf.lump_orig)
test=prewhiten(clim.var1[, 5], cmr.rates$cf.lump_extinct)
test=prewhiten(clim.var1[, 4], cmr.rates$cf.lump_extinct)
test=prewhiten(clim.var1[, 3], cmr.rates$cf.lump_extinct)
test=prewhiten(clim.var1[, 2], cmr.rates$cf.lump_extinct)
test=prewhiten(clim.var1[, 1], cmr.rates$cf.lump_extinct)
prewhiten(clim.var1.detrend[, 1], cmr.rates$cf.lump_orig)
prewhiten(clim.var1.detrend[, 2], cmr.rates$cf.lump_orig)
prewhiten(clim.var1.detrend[, 3], cmr.rates$cf.lump_orig)
prewhiten(clim.var1.detrend[, 4], cmr.rates$cf.lump_orig)
prewhiten(clim.var1.detrend[,1], cmr.rates.detrend$cf.lump_orig)
cmr.rates.detrend$cf.lump_orig
cmr.rates.detrend$cf.lump_orig_ages
prewhiten(clim.var1.detrend[,1], cmr.rates.detrend$cf.lump_orig)
prewhiten(clim.var1.detrend[,2], cmr.rates.detrend$cf.lump_orig)
prewhiten(clim.var1.detrend[,3], cmr.rates.detrend$cf.lump_orig)
prewhiten(clim.var1.detrend[,4], cmr.rates.detrend$cf.lump_orig)
prewhiten(clim.var1.detrend[,5], cmr.rates.detrend$cf.lump_orig)
prewhiten(clim.var1.detrend[,5], cmr.rates.detrend$cf.lump_extinct)
prewhiten(clim.var1.detrend[,4], cmr.rates.detrend$cf.lump_extinct)
prewhiten(clim.var1.detrend[,3], cmr.rates.detrend$cf.lump_extinct)
prewhiten(clim.var1.detrend[,2], cmr.rates.detrend$cf.lump_extinct)
prewhiten(clim.var1.detrend[,1], cmr.rates.detrend$cf.lump_extinct)
prewhiten(d13C.detrend, cmr.rates.detrend$turk_lump_orig_ages)
prewhiten(d13C.detrend, cmr.rates.detrend$turk_lump_extinct_ages)
?prewhiten
acf.res <- acf(clim.var1.detrend[, 1])
acf.res
acf.res$acf
sig.thresh <- qnorm(0.025) / sqrt(length(clim))
clim=clim.var1.detrend[,1]
clim
sig.thresh <- qnorm(0.025) / sqrt(length(clim))
sig.thresh
return(sum(acf.res$acf <= sig.thresh | acf.res$acf >= -1 * sig.thresh))
sig.clim.var1.detrend <- apply(clim.var1.detrend, 2, function(clim){
acf.res <- acf(clim)
sig.thresh <- qnorm(0.025) / sqrt(length(clim))
return(sum(acf.res$acf <= sig.thresh | acf.res$acf >= -1 * sig.thresh))
})
sig.clim.var1.detrend
sig.clim.var1.detrend <- apply(clim.var1.detrend, 2, function(clim){
acf.res <- acf(clim, plot = FALSE)
sig.thresh <- qnorm(0.025) / sqrt(length(clim))
return(sum(acf.res$acf <= sig.thresh | acf.res$acf >= -1 * sig.thresh))
})
sig.clim.var1.detrend
acf(clim, lag.max=0)
d13C.acf <- acf(d13C)
d13C.acf <- acf(d13C.detrend)
sig.d13C.detrend <- 0
cmr
cmr.rates.detrend
cmr=cmr.rates.detrend[[1]]
cmr
acf.res <- acf(cmr, plot = FALSE)
plot(acf.res)
sig.thresh <- qnorm(0.025) / sqrt(length(cmr))
sig.cmr.rates.detrend <- lapply(cmr.rates.detrend, function(cmr){
acf.res <- acf(cmr, plot = FALSE)
sig.thresh <- qnorm(0.025) / sqrt(length(cmr))
return(sum(acf.res$acf <= sig.thresh | acf.res$acf >= -1 * sig.thresh))
})
sig.cmr.rates.detrend
acf(cmr.rates.detrend[[1]])
acf(cmr.rates.detrend[[2]])
acf(cmr.rates.detrend[[3]])
acf(cmr.rates.detrend[[4]])
# 4. cross-correlation analyses & plots
# Author: Andrew Du
# Date: 4-21-21 (revised 1-3-21)
## Read in CMR results
CMR.res <- readRDS("CMR files/CMR results.rds")
turk_CMR.res <- readRDS("CMR files/Turkana CMR results.rds") # Turkana only
# get out origination and extinction estimates for lumped cf treatment & combine into one list
cmr_cf.lump <- CMR.res$neo_cf.lump # all localities cf lumped
turk_cmr_lump <- turk_CMR.res$neo_cf.lump # turkana cf lumped
cmr.rates <- list(
cf.lump_orig = 1 - cmr_cf.lump$estimate[grep("Gamma", rownames(cmr_cf.lump))], # all localities origination
cf.lump_extinct = 1 - cmr_cf.lump$estimate[grep("Phi", rownames(cmr_cf.lump))], # all localities extinction
turk_lump_orig = 1 - turk_cmr_lump$estimate[grep("Gamma", rownames(turk_cmr_lump))], # turkana origination
turk_lump_extinct = 1 - turk_cmr_lump$estimate[grep("Phi", rownames(turk_cmr_lump))] # turkana extinction
)
# create a list of ages, corresponding to rates in cmr.rates
bins <- seq(3.75, 0, -0.25) # create time bins of 0.25 Myr from 3.75-0 Ma
time.bin.mid <- bins[-length(bins)] + diff(bins)[1] / 2 # bin age midpoints
turk.bin.mid <- seq(4.125, 1.125, -0.25) # time bin midpoints for 0.25 Myr from 4.125-1.125 for Turkana
ages <- list(
cf.lump_orig_ages = time.bin.mid[-1],
cf.lump_extinct_ages = time.bin.mid[-length(time.bin.mid)],
turk_lump_orig_ages = turk.bin.mid[-1],
turk_lump_extinct_ages = turk.bin.mid[-length(turk.bin.mid)]
)
## Read in climate variability data
clim.var <- read.csv(file = "original datasets/climate variability 250ka bins.csv", header = TRUE, row.names = 1)
## remove time bins from climate variability that aren't in CMR results
clim.var1 <- clim.var[seq(1, which(rownames(clim.var) == "3625")), ]
clim.var1 <- clim.var1[, -ncol(clim.var1)]
clim.var1 <- clim.var1[seq(nrow(clim.var1), 1), ] # reverse row order, so time bins match those of CMR rates
d13C <- clim.var$Turkana_psol_d13C # Turkana psol data only
d13C <- d13C[rownames(clim.var) %in% seq(1125, 4125, 250)] # get out data synchronous with mammal data
d13C <- rev(d13C) # reverse row order, so time bins match those of CMR rates
####################################################
## Detrend each time series using a LOWESS regression
# write a function to do this
# ARGUMENTS:
# age: age associated with each data point in the time series
# x: variable value associated with each data point
# span: smoothing span of LOWESS regression (passed on to lowess() function)
detrend <- function(age, x, span = 2 / 3){
lowess.res <- lowess(age, x, f = span)
return(x - rev(lowess.res$y)) # rev() is needed to maintain order from older to younger
}
# climate variables
clim.var1.detrend <- apply(clim.var1, 2, function(clim) detrend(age = as.numeric(rownames(clim.var1)) / 1000, x = clim))
# d13C paleosol
d13C.detrend <- detrend(age = seq(4.125, 1.125, -0.25), x = d13C)
# CMR rates
cmr.rates.detrend <- mapply(detrend, age = ages, x = cmr.rates)
## run CCF analyses
# create function for estimate CCF and its p-value
# ARGUMENTS:
# climate: climate time series
# cmr_rate: CMR rate time series
# ccf.lag: max #lags to consider in CCF
# acf.lag: max. # lags in ACF for computing SE
CCF <- function(climate, cmr_rate, ccf.lag, acf.lag.clim, acf.lag.cmr = acf.lag.clim){
n <- length(climate)
ccf.res <- ccf(cmr_rate, climate, plot = FALSE)[0:ccf.lag]
ccf.hat <- ccf.res$acf
acf.clim <- acf(climate, lag.max = acf.lag.clim, plot = FALSE)$acf
acf.cmr <- acf(cmr_rate, lag.max = acf.lag.cmr, plot = FALSE)$acf
ccf.se <- sqrt((1 + 2 * sum(acf.clim * acf.cmr)) / n)
p.vals <- sapply(ccf.hat, function(x) pnorm(abs(x), sd = ccf.se, lower.tail = FALSE) * 2)
return(list(lag.n = seq(0, ccf.lag), ccf.hat = ccf.hat, ccf.se = ccf.se, p.vals = p.vals))
}
# run CCFs for E. African data
ccf.res.orig <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-1], cmr_rate = cmr.rates.detrend$cf.lump_orig, ccf.lag = 2, acf.lag.clim = length(clim) - 1))
ccf.res.extinct <- apply(clim.var1.detrend, 2, function(clim) CCF(climate = clim[-length(clim)], cmr_rate = cmr.rates.detrend$cf.lump_extinct, ccf.lag = 2, acf.lag.clim = length(clim) - 1))
# run CCFs for Turkana data
ccf.turk.orig <- CCF(climate = d13C.detrend[-1], cmr_rate = cmr.rates.detrend$turk_lump_orig, ccf.lag = 2, acf.lag.clim = length(d13C.detrend) - 1)
ccf.turk.extinct <- CCF(climate = d13C.detrend[-length(d13C)], cmr_rate = cmr.rates.detrend$turk_lump_extinct, ccf.lag = 2, acf.lag.clim = length(d13C.detrend) - 1)
## see how many P-values are significant
p.vals <- c(sapply(ccf.res.orig, function(x) x$p.vals),
sapply(ccf.res.extinct, function(x) x$p.vals),
ccf.turk.orig$p.vals,
ccf.turk.extinct$p.vals)
sum(p.vals <= 0.05) # none are significant.
# The same is true whether default lag.max argument from acf() is used (10*log10(n)) or if only significant ACFs are used (b/c none of the ACFs for the CMR rates are significant)
